Maven
    mvn -v 查看版本
        compile 编译
        test 测试
        package 打包为jar
        clean 删除target
        install 安装jar包到本地目录中（默认为本目录下打包并加入到本地仓库中）
        archetype:generate 自动生成
            -DgroupId= 组织名，公司网址反写+项目名
            -DartifactId= 项目名+模块名
            -Dversion= 
            -Dpackage=
    

Junit
    // 将测试类放在src内test目录下，包名保持一致
    // public void修饰不带参，测试方法之间独立
    import org.junit.Test;

    import static org.junit.Assert.*;
    public class JunitTest {
        @Test
        public void testAdd() {  // 随便起一个名
            assertEquals(6,new Calculate().add(3,3));
        }
    }

    // @Test注释可以加expected参数（若出此错误也算通过）和timeout（限时）注释
    // @Test(expected=ArithmeticExcption.class) 即使算数上有错比如除数为零则也通过
    // @Test(timeout=2000) 如果有死循环最多也只跑2000ms
    
    // @Ignore 会被忽略执行

    // 测试套件来执行一堆测试类，声明一个空类，加上
    // @RunWith(Suite.class)
    // @Suite.SuiteClasses({class1,class2,....})
    // 测试链测试一堆类，将测试类用数组形式传入Suite里

    // 参数化设置
    // @RunWith(Parameterized.class)
    
    // 新建测试类
    @RunWith(Parameterized.class)
    public class ParameterTest {

        // 声明参数
        int expected = 0, input1 = 0, input2 = 0;

        // 设置参数数组
        @Parameters
        public static Collection<Object[]> t() {
            return Arrays.asList(new Object[][] {
                {3,1,2},
                {4,2,2}
            });
        }

        // 使用构造函数初始化参数
        public ParameterTest(int expected, int input1, int input2) {
            this.expected = expected;
            ...
        }

        // 编写测试方法
        @Test
        public void testAdd() {
            assertEquals(expected, new Claculate().add(input1, inpt2))
        }
    }
